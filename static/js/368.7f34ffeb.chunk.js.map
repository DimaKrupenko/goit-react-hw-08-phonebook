{"version":3,"file":"static/js/368.7f34ffeb.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/components/Form/Form.module.css?89ba","components/Form/Form.js","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.js","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/redux/contacts/selectors.js","components/ContactList/ContactList.js","components/pages/Contacts.jsx"],"sourcesContent":["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Form_form__e1yzW\",\"input\":\"Form_input__FTtTw\",\"button__form\":\"Form_button__form__7Sa7h\"};","import React from 'react';\nimport { nanoid } from 'nanoid';\nimport styles from './Form.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'components/redux/contacts/operations';\n\nconst Form = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts.items);\n\n  const nameId = nanoid();\n  const numberId = nanoid();\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const form = evt.currentTarget;\n    const newContactName = form.elements.name.value.toLowerCase();\n    const nameInContact = contacts.find(\n      newContact => newContact.name.toLowerCase() === newContactName\n    );\n    nameInContact\n      ? alert(`${newContactName} is already in contacts`)\n      : dispatch(\n          addContact({\n            name: form.elements.name.value,\n            number: form.elements.number.value,\n          })\n        );\n\n    form.reset();\n  };\n\n  return (\n    <form className={styles.form} onSubmit={handleSubmit}>\n      <label htmlFor={nameId}>\n        Name\n        <input\n          className={styles.input}\n          type=\"text\"\n          name=\"name\"\n          // value={name}\n          id={nameId}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n      <label htmlFor={numberId}>\n        Number\n        <input\n          className={styles.input}\n          type=\"tel\"\n          name=\"number\"\n          // value={number}\n          id={numberId}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n        <button className={styles.button__form} type=\"submit\">\n          Add contact\n        </button>\n      </label>\n    </form>\n  );\n};\n\nexport default Form;\n","// extracted by mini-css-extract-plugin\nexport default {\"filter__label\":\"Filter_filter__label__ttfPR\",\"filter__input\":\"Filter_filter__input__toa89\"};","import React from 'react';\nimport styles from './Filter.module.css';\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from '../redux/contacts/filtersSlice';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  // const filter = useSelector(state => state.filters);\n\n  const onChange = evt => {\n    dispatch(setFilter(evt.target.value));\n    // console.log(evt.target.value);\n    // console.log(evt);\n  };\n\n  return (\n    <label className={styles.filter__label} htmlFor=\"\">\n      Find contacts by names\n      <input className={styles.filter__input} type=\"text\" onChange={onChange} />\n    </label>\n    //     );\n  );\n};\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"contact__buttton\":\"ContactList_contact__buttton__UFesA\",\"contact\":\"ContactList_contact__0STHS\",\"contact__list\":\"ContactList_contact__list__2jNwc\"};","export const getContacts = state => state.contacts;\n","// import React from 'react';\nimport styles from './ContactList.module.css';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\n// import { deleteContacts } from '../redux/userSlice';\nimport { fetchContacts, deleteContact } from '../redux/contacts/operations';\nimport { useEffect } from 'react';\nimport { getContacts } from '../redux/contacts/selectors';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const { items, isLoading, error } = useSelector(getContacts);\n  const filter = useSelector(state => state.filters.filters);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const visibleContact = items.filter(contact =>\n    contact.name.toLowerCase().includes(filter)\n  );\n  return (\n    <ul className={styles.contact}>\n      {isLoading && <b>Loading contacts...</b>}\n      {error && <b>{error}</b>}\n      {visibleContact &&\n        visibleContact.map(contact => (\n          <li className={styles.contact__list} key={contact.id}>\n            {contact.name + ': ' + contact.phone}\n            <button\n              className={styles.contact__buttton}\n              type=\"click\"\n              onClick={() => dispatch(deleteContact(contact.id))}\n            >\n              Delete\n            </button>\n          </li>\n        ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n\nContactList.propTypes = {\n  contacts: PropTypes.array,\n};\n","import React from 'react';\nimport Form from '../Form/Form'\nimport Filter from '../Filter/Filter'\nimport ContactList from '../ContactList/ContactList';\n\n\n\nconst Contacts = () => {\n    \n    return (\n      <div\n        style={{\n          // height: '100vh',\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          fontSize: 40,\n          color: '#010101'\n        }}\n      >\n        <div>\n          <h1>PhoneBook</h1>\n          <Form/>\n          \n          <h2>Contacts</h2>\n          <Filter/>\n          \n          <ContactList/>\n      </div>\n        \n      </div>\n    );\n  };\n\nexport default Contacts\n"],"names":["nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","dispatch","useDispatch","contacts","useSelector","state","items","nameId","numberId","className","styles","onSubmit","evt","preventDefault","form","currentTarget","newContactName","elements","name","value","toLowerCase","find","newContact","alert","addContact","number","reset","htmlFor","type","pattern","title","required","onChange","setFilter","target","getContacts","isLoading","error","filter","filters","useEffect","fetchContacts","visibleContact","contact","includes","map","phone","onClick","deleteContact","style","display","justifyContent","alignItems","fontSize","color"],"sourceRoot":""}